const { Client, Intents, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const config = require('./config');
const CommandHandler = require('./handlers/commandHandler');
const ButtonHandler = require('./handlers/buttonHandler');

// Handler instances olu≈ütur
const commandHandler = new CommandHandler();
const buttonHandler = new ButtonHandler();

// Bot client olu≈ütur
const client = new Client({
    intents: [
        Intents.FLAGS.GUILDS,
        Intents.FLAGS.GUILD_MESSAGES,
        Intents.FLAGS.GUILD_MEMBERS
    ]
});

// Commands collection
client.commands = new Collection();

// Komutlarƒ± y√ºkle
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    client.commands.set(command.name, command);
}

// Bot hazƒ±r olduƒüunda
client.once('ready', () => {
    console.log('üèà Futbol Transfer Botu aktif!');
    console.log(`ü§ñ ${client.user.tag} olarak giri≈ü yapƒ±ldƒ±`);
    client.user.setActivity('‚öΩ Transfer m√ºzakereleri', { type: 3 }); // 3 = WATCHING
});

// Mesaj dinleyicisi
client.on('messageCreate', async message => {
    // Bot mesajlarƒ±nƒ± ve DM'leri yok say
    if (message.author.bot || !message.guild) return;
    
    // Prefix kontrol√º
    if (!message.content.startsWith(config.prefix)) return;
    
    await commandHandler.handleCommand(client, message);
});

// Etkile≈üim dinleyicisi (butonlar, select men√ºler ve modaller)
client.on('interactionCreate', async interaction => {
    try {
        if (interaction.isButton()) {
            await buttonHandler.handleButton(client, interaction);
        } else if (interaction.isSelectMenu()) {
            await handleSelectMenu(client, interaction);
        } else if (interaction.isModalSubmit && interaction.isModalSubmit()) {
            await handleModalSubmit(client, interaction);
        }
    } catch (error) {
        console.error('Etkile≈üim hatasƒ±:', error);
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({ content: '‚ùå Bir hata olu≈ütu!', ephemeral: true });
        }
    }
});

// Select menu i≈üleyicisi
async function handleSelectMenu(client, interaction) {
    const customId = interaction.customId;
    
    if (customId.startsWith('role_select_')) {
        const roleType = customId.split('_')[2];
        const selectedRoleId = interaction.values[0];
        
        const permissions = require('./utils/permissions');
        const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
        
        try {
            // Se√ßilen rol√º al
            const selectedRole = interaction.guild.roles.cache.get(selectedRoleId);
            
            if (!selectedRole) {
                return interaction.reply({
                    content: '‚ùå Se√ßilen rol bulunamadƒ±!',
                    ephemeral: true
                });
            }

            // Rol ayarƒ±nƒ± kaydet
            permissions.setRole(interaction.guild.id, roleType, selectedRoleId);
            
            // Ba≈üarƒ± mesajƒ±
            const successEmbed = new MessageEmbed()
                .setColor(config.colors.success)
                .setTitle('‚úÖ Rol Ba≈üarƒ±yla Ayarlandƒ±')
                .setDescription(`**${getRoleName(roleType)}** olarak ${selectedRole} rol√º ayarlandƒ±!`)
                .addField('üìä Rol Bilgileri', `**Rol Adƒ±:** ${selectedRole.name}\n**√úye Sayƒ±sƒ±:** ${selectedRole.members.size}\n**Renk:** ${selectedRole.hexColor}`, false)
                .setTimestamp();

            // Geri d√∂n butonu
            const backButton = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId('role_setup_back_main')
                        .setLabel('Ana Men√ºye D√∂n')
                        .setStyle('PRIMARY')
                        .setEmoji('üè†'),
                    new MessageButton()
                        .setCustomId('role_back')
                        .setLabel('Mevcut Rolleri G√∂ster')
                        .setStyle('SECONDARY')
                        .setEmoji('üìã')
                );

            await interaction.update({
                embeds: [successEmbed],
                components: [backButton]
            });

        } catch (error) {
            console.error('Rol ayarlama hatasƒ±:', error);
            await interaction.reply({
                content: '‚ùå Rol ayarlanƒ±rken bir hata olu≈ütu!',
                ephemeral: true
            });
        }
    }
}

// Rol ismi helper fonksiyonu
function getRoleName(roleType) {
    const names = {
        'president': 'Ba≈ükan Rol√º',
        'player': 'Futbolcu Rol√º',
        'freeAgent': 'Serbest Futbolcu Rol√º',
        'transferAuthority': 'Transfer Yetkili Rol√º',
        'transferPingRole': 'Transfer Duyuru Ping Rol√º',
        'freeAgentPingRole': 'Serbest Duyuru Ping Rol√º',
        'announcementPingRole': 'Duyur Duyuru Ping Rol√º'
    };
    return names[roleType] || 'Bilinmeyen Rol';
}

// Modal submission i≈üleyicisi
async function handleModalSubmit(client, interaction) {
    try {
        await interaction.deferReply({ ephemeral: true });
        
        const customId = interaction.customId;
        const embeds = require('./utils/embeds');
        const channels = require('./utils/channels');
        const config = require('./config');
        
        console.log('Modal submission received:', customId);

        // Offer form modali
        if (customId.startsWith('offer_form_')) {
            const [, , playerId, presidentId] = customId.split('_');
            const player = interaction.guild.members.cache.get(playerId);
            const president = interaction.guild.members.cache.get(presidentId);

            if (!player || !president) {
                return interaction.editReply({ content: 'Kullanƒ±cƒ±lar bulunamadƒ±!' });
            }

            const offerData = {
                newTeam: interaction.fields.getTextInputValue('new_team') || '',
                playerName: interaction.fields.getTextInputValue('player_name') || '',
                salary: interaction.fields.getTextInputValue('salary') || '6.000.000‚Ç∫/yƒ±l',
                contractDuration: interaction.fields.getTextInputValue('contract_duration') || '2 yƒ±l',
                bonus: interaction.fields.getTextInputValue('bonus') || '3.000.000‚Ç∫'
            };

            // M√ºzakere kanalƒ± olu≈ütur
            const channel = await channels.createNegotiationChannel(interaction.guild, president.user, player.user, 'offer');
            if (!channel) {
                return interaction.editReply({ content: 'M√ºzakere kanalƒ± olu≈üturulamadƒ±!' });
            }

            // Teklif embed'i olu≈ütur
            const offerEmbed = embeds.createOfferForm(president.user, player.user, offerData);
            
            const buttons = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId(`offer_accept_${playerId}_${presidentId}`)
                        .setLabel('Kabul Et')
                        .setStyle('SUCCESS')
                        .setEmoji(config.emojis.check),
                    new MessageButton()
                        .setCustomId(`offer_reject_${playerId}_${presidentId}`)
                        .setLabel('Reddet')
                        .setStyle('DANGER')
                        .setEmoji(config.emojis.cross),
                    new MessageButton()
                        .setCustomId(`offer_edit_${playerId}_${presidentId}`)
                        .setLabel('D√ºzenle')
                        .setStyle('SECONDARY')
                        .setEmoji(config.emojis.edit)
                );

            await channel.send({
                embeds: [offerEmbed],
                components: [buttons]
            });

            await interaction.editReply({ content: `Teklif m√ºzakeresi ${channel} kanalƒ±nda ba≈ülatƒ±ldƒ±!` });
        }
    } catch (error) {
        console.error('Modal submission error:', error);
        if (interaction.deferred) {
            await interaction.editReply({ 
                content: 'Modal i≈ülenirken hata olu≈ütu! L√ºtfen tekrar deneyin.' 
            });
        } else if (!interaction.replied) {
            await interaction.reply({ 
                content: 'Modal i≈ülenirken hata olu≈ütu! L√ºtfen tekrar deneyin.', 
                ephemeral: true 
            });
        }
    }
}

// Hata y√∂netimi
client.on('error', console.error);

process.on('unhandledRejection', error => {
    console.error('Unhandled promise rejection:', error);
});

// Bot'u ba≈ülat
client.login(process.env.DISCORD_TOKEN);
