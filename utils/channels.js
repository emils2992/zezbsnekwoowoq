const { Constants } = require('discord.js');
const config = require('../config');

class ChannelManager {
    async createNegotiationChannel(guild, user1, user2, type, player = null) {
        try {
            // Kanal adƒ±nƒ± olu≈ütur
            let channelName;
            switch (type) {
                case 'offer':
                    channelName = `teklif-${user1.username}-${user2.username}`;
                    break;
                case 'contract':
                    channelName = `sozlesme-${user1.username}-${user2.username}`;
                    break;
                case 'hire':
                    channelName = `kiralik-${user1.username}-${user2.username}`;
                    break;
                case 'trade':
                    channelName = `takas-${user1.username}-${user2.username}`;
                    break;
                default:
                    channelName = `m√ºzakere-${user1.username}-${user2.username}`;
            }

            // Kanal ismini Discord kurallarƒ±na uygun hale getir
            channelName = channelName
                .toLowerCase()
                .replace(/[^a-z0-9-]/g, '-')
                .replace(/-+/g, '-')
                .slice(0, 100);

            // M√ºzakereler kategorisini bul veya olu≈ütur - en √ºstte konumlandƒ±r
            let category = guild.channels.cache.find(c => 
                c.type === 'GUILD_CATEGORY' && 
                c.name.toLowerCase().includes('m√ºzakere')
            );

            if (!category) {
                category = await guild.channels.create('m√ºzakere-s√∂zle≈üme', {
                    type: 'GUILD_CATEGORY',
                    permissionOverwrites: [
                        {
                            id: guild.roles.everyone,
                            deny: ['VIEW_CHANNEL']
                        }
                    ]
                });
                
                // Kategoriyi en √ºste ta≈üƒ±
                await category.setPosition(0);
            } else {
                // Mevcut kategoriyi de en √ºste ta≈üƒ±
                await category.setPosition(0);
            }

            // ƒ∞zinleri ayarla
            const permissionOverwrites = [
                {
                    id: guild.roles.everyone,
                    deny: ['VIEW_CHANNEL']
                },
                {
                    id: user1.id,
                    allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY']
                },
                {
                    id: user2.id,
                    allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY']
                }
            ];

            // Eƒüer oyuncu varsa (contract ve trade i√ßin) ona da izin ver
            if (player) {
                permissionOverwrites.push({
                    id: player.id,
                    allow: ['VIEW_CHANNEL', 'READ_MESSAGE_HISTORY'],
                    deny: ['SEND_MESSAGES'] // Oyuncu sadece okuyabilir
                });
            }

            // Transfer yetkililerine eri≈üim ver
            const permissions = require('./permissions');
            const transferAuthorities = permissions.getTransferAuthorities(guild);
            for (const authorityRole of transferAuthorities) {
                permissionOverwrites.push({
                    id: authorityRole.id,
                    allow: ['VIEW_CHANNEL', 'READ_MESSAGE_HISTORY']
                });
            }

            // Kanalƒ± olu≈ütur
            const channel = await guild.channels.create(channelName, {
                type: 'GUILD_TEXT',
                parent: category,
                permissionOverwrites: permissionOverwrites,
                topic: `${type} m√ºzakeresi - ${user1.username} & ${user2.username}${player ? ` (Oyuncu: ${player.username})` : ''}`
            });

            // 24 saat sonra kanalƒ± sil
            setTimeout(async () => {
                try {
                    if (channel && !channel.deleted) {
                        await channel.delete('M√ºzakere s√ºresi doldu');
                    }
                } catch (error) {
                    console.log('Kanal silme hatasƒ±:', error.message);
                }
            }, 24 * 60 * 60 * 1000); // 24 saat

            return channel;

        } catch (error) {
            console.error('M√ºzakere kanalƒ± olu≈üturma hatasƒ±:', error);
            return null;
        }
    }

    async deleteNegotiationChannel(channel, reason = 'M√ºzakere tamamlandƒ±') {
        try {
            if (channel && !channel.deleted) {
                await channel.delete(reason);
                return true;
            }
            return false;
        } catch (error) {
            console.error('Kanal silme hatasƒ±:', error);
            return false;
        }
    }

    async findFreeAgentChannel(guild) {
        // Serbest futbolcu duyuru kanalƒ±nƒ± ayarlanmƒ±≈ü kanaldan bul
        const fs = require('fs');
        const path = require('path');
        const rolesPath = path.join(__dirname, '../data/roles.json');
        
        try {
            const allData = JSON.parse(fs.readFileSync(rolesPath, 'utf8'));
            const guildData = allData[guild.id];
            
            if (guildData && guildData.freeAgentChannel) {
                const channel = guild.channels.cache.get(guildData.freeAgentChannel);
                if (channel) return channel;
            }
        } catch (error) {
            console.log('Ayarlanmƒ±≈ü serbest futbolcu kanalƒ± bulunamadƒ±, varsayƒ±lan isimlerle aranƒ±yor...');
        }
        
        // Fallback - varsayƒ±lan kanal isimlerini ara
        const channelNames = ['serbest-futbolcular', 'serbest-oyuncular', 'free-agents'];
        
        for (const name of channelNames) {
            const channel = guild.channels.cache.find(c => 
                c.type === 'GUILD_TEXT' && 
                c.name.toLowerCase().includes(name)
            );
            if (channel) return channel;
        }

        return null;
    }

    async findAnnouncementChannel(guild) {
        // Duyuru kanalƒ±nƒ± ayarlanmƒ±≈ü kanaldan bul
        const fs = require('fs');
        const path = require('path');
        const rolesPath = path.join(__dirname, '../data/roles.json');
        
        try {
            const allData = JSON.parse(fs.readFileSync(rolesPath, 'utf8'));
            const guildData = allData[guild.id];
            
            if (guildData && guildData.announcementChannel) {
                const channel = guild.channels.cache.get(guildData.announcementChannel);
                if (channel) return channel;
            }
        } catch (error) {
            console.log('Ayarlanmƒ±≈ü duyuru kanalƒ± bulunamadƒ±');
        }
        
        return null;
    }

    async createFreeAgentAnnouncement(guild, player, reason = 'S√∂zle≈üme feshi') {
        try {
            const freeAgentChannel = await this.findFreeAgentChannel(guild);
            
            if (!freeAgentChannel) {
                console.log('Serbest futbolcu kanalƒ± bulunamadƒ±');
                return null;
            }

            const embed = require('./embeds').createSuccess(
                'Yeni Serbest Futbolcu',
                `**${player.username}** artƒ±k serbest futbolcu!\n\n**Sebep:** ${reason}\n\nTransfer teklifleri i√ßin DM atabilir veya \`.offer\` komutunu kullanabilirsiniz.`
            );

            embed.setThumbnail(player.displayAvatarURL({ dynamic: true }));
            embed.addFields({ name: 'üìä Oyuncu Bilgileri', value: 'Detaylar i√ßin oyuncuyla ileti≈üime ge√ßin', inline: false });

            const message = await freeAgentChannel.send({
                content: `${config.emojis.football} **Yeni Serbest Futbolcu Duyurusu**`,
                embeds: [embed]
            });

            return message;

        } catch (error) {
            console.error('Serbest futbolcu duyurusu hatasƒ±:', error);
            return null;
        }
    }

    async cleanupOldChannels(guild) {
        try {
            const category = guild.channels.cache.find(c => 
                c.type === 'GUILD_CATEGORY' && 
                c.name.toLowerCase().includes('m√ºzakere')
            );

            if (!category) return;

            const channels = category.children;
            const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);

            for (const [channelId, channel] of channels) {
                if (channel.type === 'GUILD_TEXT' && channel.createdTimestamp < oneDayAgo) {
                    try {
                        await channel.delete('Otomatik temizlik - 24 saat ge√ßti');
                        console.log(`Eski m√ºzakere kanalƒ± silindi: ${channel.name}`);
                    } catch (error) {
                        console.log(`Kanal silme hatasƒ±: ${error.message}`);
                    }
                }
            }

        } catch (error) {
            console.error('Kanal temizleme hatasƒ±:', error);
        }
    }
}

module.exports = new ChannelManager();
